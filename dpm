#!/bin/bash

# DX Project Manager
# ------------------

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null && pwd )"
CONFIG_FILE="${HOME}/.dpm/.config"

readonly CONFIG_KEYS=("NAME" "EMAIL" "GITHUB_USER" "REMOTE_ORIGIN" "REMOTE_SHARED" "DXRAM_WORKSPACE_DIR")
readonly CONFIG_PROMPTS=("Please specify your full name:" "Please specify your email address:" "Please specify your Github username:" "Please specifiy your private remote's name:" "Pleasy specify your shared remote's name:" "Please specify your workspace directory:")

read_config_data()
{
	local key=$1
	local prompt=$2
	
	printf "${prompt} "
	read input
	echo "${key}=\"${input}\"" >> ${CONFIG_FILE}
}

# Abort on any errors
set -e

# Check if configuration file already exists
if [[ ! -f ${CONFIG_FILE} ]]; then
	# Create configuration file
	touch ${CONFIG_FILE}

	# Read configuration file data
	for i in "${!CONFIG_KEYS[@]}"; do
		read_config_data "${CONFIG_KEYS[$i]}" "${CONFIG_PROMPTS[$i]}"
	done
fi

source "${CONFIG_FILE}"

mkdir -p "${DXRAM_WORKSPACE_DIR}"

readonly GITHUB_SHARED="git@github.com:hhu-bsinfo"
readonly GITHUB_ORIGIN="git@github.com:$GITHUB_USER"

readonly REPOSITORIES=("cdepl" "dxbuild" "dxlog" "dxmem" "dxmon" "dxnet" "dxram" "dxutils" "ibdxnet" "dxapps")

clone_and_setup_repository()
{
    local repo_name=$1

    if [ -d "$repo_name" ]; then
        echo "Skipping existing repo $repo_name"
        return
    fi

    git clone --depth 50 --no-single-branch $GITHUB_SHARED/$repo_name "${DXRAM_WORKSPACE_DIR}/$repo_name"
    git -C "${DXRAM_WORKSPACE_DIR}/$repo_name" config user.name "$NAME"
    git -C "${DXRAM_WORKSPACE_DIR}/$repo_name" config user.email "$EMAIL"
    git -C "${DXRAM_WORKSPACE_DIR}/$repo_name" remote rename origin $REMOTE_SHARED
    git -C "${DXRAM_WORKSPACE_DIR}/$repo_name" remote add $REMOTE_ORIGIN $GITHUB_ORIGIN/$repo_name
    git -C "${DXRAM_WORKSPACE_DIR}/$repo_name" checkout -b development $REMOTE_SHARED/development
}

checkout_branch_repository()
{
    local repo_name=$1
    local branch=$2

    git -C "${DXRAM_WORKSPACE_DIR}/$repo_name" checkout $branch
}

fetch_and_rebase_hhubs()
{
    local repo_name=$1
    local remote_name=$2
    local branch_name=$3

    git -C "${DXRAM_WORKSPACE_DIR}/$repo_name" fetch $remote_name

    set +e
    # Check if branch exists
    git -C "${DXRAM_WORKSPACE_DIR}/$repo_name" rev-parse --verify $branch_name > /dev/null

    if [ "$?" = "0" ]; then
        set -e
        echo "$branch_name branch..."
        git -C "${DXRAM_WORKSPACE_DIR}/$repo_name" checkout $branch_name
        git -C "${DXRAM_WORKSPACE_DIR}/$repo_name" rebase $remote_name/$branch_name
    fi

    set -e
}

push_to_remote()
{
    local repo_name=$1
    local remote_name=$2
    local branch_name=$3

    set +e
    # Check if branch exists
    git -C "${DXRAM_WORKSPACE_DIR}/$repo_name" rev-parse --verify $branch_name > /dev/null

    if [ "$?" = "0" ]; then
        set -e
        echo "$branch_name branch..."
        git -C "${DXRAM_WORKSPACE_DIR}/$repo_name" checkout $branch_name
        git -C "${DXRAM_WORKSPACE_DIR}/$repo_name" push $remote_name HEAD:$branch_name
    fi

    set -e
}

get_repositories()
{
	local repo_list="$*"
	
	if [[ -z ${repo_list} ]]; then
        echo "${REPOSITORIES[@]}"
        return 0
    fi
    
    echo "${repo_list}"
}

if [ ! "$1" ]; then
    echo "Git wrapper script to easily batch clone, update or checkout repositories for development"
    echo "Available commands: clone, pull, checkout, push"
    exit -1
fi

case $1 in  
    clone)
        for repo in $(get_repositories ${@:2}); do
            echo ">>> Cloning $repo..."
            if [ -d "$repo" ]; then
                echo "Already exists, skipping"
            else
                clone_and_setup_repository $repo
            fi
        done

        ;;
    
    checkout)
        if [ ! "$2" ]; then
            echo "Specify branch name to switch to"
            exit -1
        fi

        for repo in $(get_repositories ${@:3}); do
            echo ">>> Branch switch $repo..."
            checkout_branch_repository $repo $2
        done

        ;;

    pull)
        if [ ! "$2" ]; then
            echo "Specify the remote to pull from"
            exit -1
        fi

        for repo in $(get_repositories ${@:3}); do
            echo ">>> Pull $repo from $2..."
            fetch_and_rebase_hhubs $repo $2 master
            fetch_and_rebase_hhubs $repo $2 development
        done
        
        ;;

    push)
        if [ ! "$2" ]; then
            echo "Specify the remote to push to"
            exit -1
        fi

        for repo in $(get_repositories ${@:3}); do
            echo ">>> Pushing $repo to $2..."
            push_to_remote $repo $2 master
            push_to_remote $repo $2 development
        done
        
        ;;  

    *)
        echo "Invalid command"
        ;;
esac
